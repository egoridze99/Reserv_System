"""Добавит таблицу с транзакциями

Revision ID: a54750996554
Revises: d3935f203b2f
Create Date: 2024-05-14 17:19:37.025630

"""
import datetime
from datetime import timedelta

from alembic import op
import sqlalchemy as sa
from sqlalchemy import orm

from models import Transaction, TransactionTypeEnum, TransactionStatusEnum
from models.dictionaries import reservation_transaction_dict, certificate_transaction_dict
from utils.sa_query_result_to_dict import sa_query_result_to_dict

# revision identifiers, used by Alembic.
revision = 'a54750996554'
down_revision = 'd3935f203b2f'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('transaction',
                    sa.Column('id', sa.String(), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('sum', sa.Integer(), nullable=False),
                    sa.Column('alias', sa.String(), nullable=True),
                    sa.Column('description', sa.String(), nullable=True),
                    sa.Column('cinema_id', sa.Integer(), nullable=False),
                    sa.Column('transaction_type', sa.Enum('cash', 'card', 'sbp', name='transactiontypeenum'),
                              nullable=False),
                    sa.Column('transaction_status',
                              sa.Enum('pending', 'rejected', 'completed', 'refunded', name='transactionstatusenum'),
                              nullable=True),
                    sa.ForeignKeyConstraint(['cinema_id'], ['cinema.id'], name=op.f('fk_transaction_cinema_id_cinema')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_transaction'))
                    )
    op.create_table('certificate_transaction_dict',
                    sa.Column('certificate_id', sa.Integer(), nullable=True),
                    sa.Column('transaction_id', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['certificate_id'], ['certificate.id'], name='certificate_id'),
                    sa.ForeignKeyConstraint(['transaction_id'], ['transaction.id'], name='transaction_id'),
                    sa.UniqueConstraint('transaction_id', name=op.f('uq_certificate_transaction_dict_transaction_id'))
                    )
    op.create_table('reservation_transaction_dict',
                    sa.Column('reservation_id', sa.Integer(), nullable=True),
                    sa.Column('transaction_id', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['reservation_id'], ['reservation.id'], name='reservation_id'),
                    sa.ForeignKeyConstraint(['transaction_id'], ['transaction.id'], name='transaction_id'),
                    sa.UniqueConstraint('transaction_id', name=op.f('uq_reservation_transaction_dict_transaction_id'))
                    )

    bind = op.get_bind()
    session = orm.Session(bind=bind)

    reservations = sa_query_result_to_dict(bind.execute(
        """
        select 
            reservation.id as id, 
            c.id as cinema_id,
            card,
            cash,
            date,
            duration
        from 
            reservation 
        join 
            room on room.id = reservation.room_id 
        join 
            cinema c on room.cinema_id = c.id
        where 
            reservation.status = 'finished'
        """))

    reservation_transaction_mapping = []
    for reservation in reservations:
        duration = reservation["duration"]
        if isinstance(duration, str):
            if ',' in duration:
                duration = float(duration.replace(",", "."))
            elif '-' in duration:
                duration = float(duration.split('-')[0])

        date_as_str = reservation["date"][:reservation["date"].index('.')] if '.' in reservation["date"] else \
            reservation["date"]
        date = datetime.datetime.strptime(date_as_str, "%Y-%m-%d %H:%M:%S")
        finish_date = date + timedelta(hours=duration)

        checkouts = sa_query_result_to_dict(bind.execute(
            f"""
            select 
                c.id as id, 
                c.sum as sum,
                c.description as description
            from 
                checkout c 
            join 
                checkout_reservation cr on c.id = cr.checkout_id
            join 
                reservation r on r.id = cr.reservation_id
            where 
                r.id = {reservation['id']}
            """))
        for checkout in checkouts:
            if checkout["sum"]:
                transaction = Transaction(created_at=finish_date, sum=-checkout["sum"],
                                          description=f"Расход на {checkout["description"]}",
                                          transaction_type=TransactionTypeEnum.cash,
                                          transaction_status=TransactionStatusEnum.completed,
                                          cinema_id=reservation["cinema_id"])

                session.add(transaction)
                reservation_transaction_mapping.append(
                    {"reservation_id": reservation["id"], "transaction_id": transaction.id})

        if reservation["card"] is not None and reservation["card"]:
            transaction = Transaction(created_at=finish_date, sum=reservation["card"],
                                      description=f"Оплата резерва {reservation["id"]} по карте",
                                      transaction_type=TransactionTypeEnum.card,
                                      transaction_status=TransactionStatusEnum.completed,
                                      cinema_id=reservation['cinema_id'])

            session.add(transaction)
            reservation_transaction_mapping.append(
                {"reservation_id": reservation["id"], "transaction_id": transaction.id})

        if reservation["cash"] is not None and reservation["cash"]:
            transaction = Transaction(created_at=finish_date, sum=reservation["cash"],
                                      description=f"Оплата резерва {reservation["id"]} наличными",
                                      transaction_type=TransactionTypeEnum.cash,
                                      transaction_status=TransactionStatusEnum.completed,
                                      cinema_id=reservation["cinema_id"])

            session.add(transaction)
            reservation_transaction_mapping.append(
                {"reservation_id": reservation["id"], "transaction_id": transaction.id})

    certificates = sa_query_result_to_dict(bind.execute("select * from certificate"))
    certificate_transaction_mapping = []
    for certificate in certificates:
        date = datetime.datetime.strptime(certificate["created_at"], "%Y-%m-%d %H:%M:%S")

        if certificate["card"] is not None and certificate["card"]:
            transaction = Transaction(created_at=date, sum=certificate["card"],
                                      description=f"Оплата сертификата {certificate["id"]} по карте",
                                      transaction_type=TransactionTypeEnum.card,
                                      transaction_status=TransactionStatusEnum.completed,
                                      cinema_id=certificate["cinema_id"])

            session.add(transaction)
            certificate_transaction_mapping.append(
                {"certificate_id": certificate["id"], "transaction_id": transaction.id})

        if certificate["cash"] is not None and certificate["cash"]:
            transaction = Transaction(created_at=date,
                                      sum=certificate["cash"],
                                      description=f"Оплата сертификата {certificate["id"]} наличными",
                                      transaction_type=TransactionTypeEnum.cash,
                                      transaction_status=TransactionStatusEnum.completed,
                                      cinema_id=certificate["cinema_id"])

            session.add(transaction)
            certificate_transaction_mapping.append(
                {"certificate_id": certificate["id"], "transaction_id": transaction.id})

    session.commit()
    op.bulk_insert(reservation_transaction_dict, reservation_transaction_mapping)
    op.bulk_insert(certificate_transaction_dict, certificate_transaction_mapping)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('reservation_transaction_dict')
    op.drop_table('certificate_transaction_dict')
    op.drop_table('transaction')
    # ### end Alembic commands ###
