"""Добавит таблицу с транзакциями

Revision ID: a54750996554
Revises: d3935f203b2f
Create Date: 2024-05-14 17:19:37.025630

"""
from datetime import timedelta

from alembic import op
import sqlalchemy as sa
from sqlalchemy import orm

from models import Reservation, Transaction, TransactionTypeEnum, TransactionStatusEnum, Certificate
from models.dictionaries import reservation_transaction_dict, certificate_transaction_dict

# revision identifiers, used by Alembic.
revision = 'a54750996554'
down_revision = 'd3935f203b2f'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('transaction',
                    sa.Column('id', sa.String(), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('sum', sa.Integer(), nullable=False),
                    sa.Column('alias', sa.String(), nullable=True),
                    sa.Column('description', sa.String(), nullable=True),
                    sa.Column('cinema_id', sa.Integer(), nullable=False),
                    sa.Column('transaction_type', sa.Enum('cash', 'card', 'sbp', name='transactiontypeenum'),
                              nullable=False),
                    sa.Column('transaction_status',
                              sa.Enum('pending', 'rejected', 'completed', 'refunded', name='transactionstatusenum'),
                              nullable=True),
                    sa.ForeignKeyConstraint(['cinema_id'], ['cinema.id'], name=op.f('fk_transaction_cinema_id_cinema')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_transaction'))
                    )
    op.create_table('certificate_transaction_dict',
                    sa.Column('certificate_id', sa.Integer(), nullable=True),
                    sa.Column('transaction_id', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['certificate_id'], ['certificate.id'], name='certificate_id'),
                    sa.ForeignKeyConstraint(['transaction_id'], ['transaction.id'], name='transaction_id'),
                    sa.UniqueConstraint('transaction_id', name=op.f('uq_certificate_transaction_dict_transaction_id'))
                    )
    op.create_table('reservation_transaction_dict',
                    sa.Column('reservation_id', sa.Integer(), nullable=True),
                    sa.Column('transaction_id', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['reservation_id'], ['reservation.id'], name='reservation_id'),
                    sa.ForeignKeyConstraint(['transaction_id'], ['transaction.id'], name='transaction_id'),
                    sa.UniqueConstraint('transaction_id', name=op.f('uq_reservation_transaction_dict_transaction_id'))
                    )

    bind = op.get_bind()
    session = orm.Session(bind=bind)
    should_update_session = True

    reservations = Reservation.query.all()
    for reservation in reservations:
        if (should_update_session):
            session = session.object_session(reservation)
            should_update_session = False

        transactions = []

        duration = reservation.duration
        if isinstance(duration, str):
            if ',' in duration:
                duration = float(duration.replace(",", "."))
            elif '-' in duration:
                duration = float(duration.split('-')[0])

        finish_date = reservation.date + timedelta(hours=duration)

        checkouts = reservation.checkout
        for checkout in checkouts:
            if checkout.sum:
                transaction = Transaction(created_at=finish_date, sum=-checkout.sum,
                                          description=f"Расход на {checkout.description}",
                                          transaction_type=TransactionTypeEnum.cash,
                                          transaction_status=TransactionStatusEnum.completed,
                                          cinema_id=reservation.room.cinema.id)

                transactions.append(transaction)

        if reservation.card is not None and reservation.card:
            transaction = Transaction(created_at=finish_date, sum=reservation.card,
                                      description=f"Оплата резерва {reservation.id} по карте",
                                      transaction_type=TransactionTypeEnum.card,
                                      transaction_status=TransactionStatusEnum.completed,
                                      cinema_id=reservation.room.cinema.id)

            transactions.append(transaction)

        if reservation.cash is not None and reservation.cash:
            transaction = Transaction(created_at=finish_date, sum=reservation.cash,
                                      description=f"Оплата резерва {reservation.id} наличными",
                                      transaction_type=TransactionTypeEnum.cash,
                                      transaction_status=TransactionStatusEnum.completed,
                                      cinema_id=reservation.room.cinema.id)

            transactions.append(transaction)

        reservation.transactions = transactions
        session.add(reservation)

    certificates = Certificate.query.all()
    for certificate in certificates:
        transactions = []

        if certificate.card is not None and certificate.card:
            transaction = Transaction(created_at=certificate.created_at, sum=certificate.card,
                                      description=f"Оплата сертификата {certificate.id} по карте",
                                      transaction_type=TransactionTypeEnum.card,
                                      transaction_status=TransactionStatusEnum.completed,
                                      cinema_id=certificate.cinema_id)

            transactions.append(transaction)

        if certificate.cash is not None and certificate.cash:
            transaction = Transaction(created_at=certificate.created_at, sum=certificate.cash,
                                      description=f"Оплата сертификата {certificate.id} наличными",
                                      transaction_type=TransactionTypeEnum.cash,
                                      transaction_status=TransactionStatusEnum.completed,
                                      cinema_id=certificate.cinema_id)

            transactions.append(transaction)

        certificate.transactions = transactions
        session.add(certificate)

    session.commit()
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('reservation_transaction_dict')
    op.drop_table('certificate_transaction_dict')
    op.drop_table('transaction')
    # ### end Alembic commands ###
